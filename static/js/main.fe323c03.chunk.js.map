{"version":3,"sources":["pages/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","state","kwicText","cyclicallyShifted","alphabeticallyShifted","onChange","e","preventDefault","_e$target","target","name","value","_this","setState","Object","defineProperty","onSubmit","console","log","axios","post","then","res","circularShifted","data","title","this","react_default","a","createElement","Container","Grid","divided","centered","Row","columns","Column","align","Form","size","Input","type","placeholder","fluid","Button","onClick","animated","color","floated","Content","hidden","visible","Icon","verticalAlign","style","display","lineHeight","Segment","inverted","React","Component","App","react_router_dom","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fe323c03.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Grid,\n    Form,\n    Container,\n    Icon,\n    Button,\n    Segment,\n    Input\n} from 'semantic-ui-react';\nimport axios from 'axios';\n\n// HomePage Component\nexport default class HomePage extends React.Component {\n\n    // Component variables\n    state = {\n        kwicText: '',\n        cyclicallyShifted: '',\n        alphabeticallyShifted: ''\n    };\n\n    // When typing begins\n    onChange = (e) => {\n        e.preventDefault();\n\n        const {name, value} = e.target;\n\n        // This is equal to \"this.setState(inputText : value});\"\n        this.setState({[name]: value});\n    };\n\n    // When go button is clicked\n    onSubmit = () => {\n        console.log('My JSON Object:', this.state);\n        axios.post('http://localhost:8091/KWIC')\n            .then((res) => {\n                console.log(res);\n                const circularShifted = res.data.title;\n                const alphabeticallyShifted = res.data.title;\n                console.log('API Response:', circularShifted, alphabeticallyShifted);\n\n                this.setState({cyclicallyShifted: circularShifted, alphabeticallyShifted: alphabeticallyShifted});\n            })\n    };\n\n    // Show these tags\n    render() {\n\n        const {kwicText} = this.state;\n\n        return (\n            <Container>\n                <Grid divided='vertically' centered>\n                    <Grid.Row columns={1}>\n                        <Grid.Column>\n                            <h1 align='center'>Input</h1>\n                            <p>Insert input and press the green button.</p>\n                            <Form size='big'>\n                                <Input type='text' name=\"kwicText\" onChange={this.onChange} value={kwicText}\n                                       placeholder='Input KWIC text here' fluid/>\n                            </Form>\n                        </Grid.Column>\n                        <Grid.Column>\n                            <Button onClick={this.onSubmit} size='huge' animated='vertical' color='green'\n                                    floated='right'>\n                                <Button.Content hidden>Proceed</Button.Content>\n                                <Button.Content visible>\n                                    <Icon name='arrow circle right'/>\n                                </Button.Content>\n                            </Button>\n                        </Grid.Column>\n                    </Grid.Row>\n\n                    <Grid.Row columns={2} verticalAlign=\"middle\" style={{display: 'flex', lineHeight: '90px'}}>\n                        <Grid.Column>\n                            <h1 align='center'>Cyclical Shift</h1>\n                            <Segment inverted>\n                                <p>{this.state.cyclicallyShifted}</p>\n                            </Segment>\n                        </Grid.Column>\n                        <Grid.Column>\n                            <h1 align='center'>Alphabetical Shift</h1>\n                            <Segment>\n                                <p>{this.state.alphabeticallyShifted}</p>\n                            </Segment>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Container>\n        );\n    }\n}","import React from 'react';\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport HomePage from './pages/HomePage';\n\nexport default class App extends React.Component {\n    render() {\n        return (\n          <div>\n              <BrowserRouter>\n                  <Route path=\"/\" exact component={HomePage}/>\n              </BrowserRouter>\n          </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}